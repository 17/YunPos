<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Ts_Param_Business"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Ts_Param_Business" type="CySoft.Model.Ts.Ts_Param_Business,CySoft.Model" />
    <typeAlias alias="ResetDataPerson"  type="CySoft.Model.Td.ResetDataPerson,CySoft.Model"/>
  </alias>
  <parameterMaps>
    <parameterMap id="selectParam" class="System.Collections.IDictionary">
      <parameter property="id_gys" column="id_gys"/>
      <parameter property="del_lx" column="del_lx"/>
    </parameterMap>
  </parameterMaps>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="id_user_masterList">
          db.[id_user_master] in <iterate property="id_user_masterList" conjunction="," open="(" close=")">#id_user_masterList[]#</iterate>
        </isNotNull>  
        <isNotNull prepend="and" property="id_user_master">db.[id_user_master]=#id_user_master#</isNotNull>
        <isNotNull prepend="and" property="not_id_user_master">db.[id_user_master] <![CDATA[ <> ]]> #not_id_user_master#</isNotNull>
        <isNotNull prepend="and" property="bmList">
          db.[bm] in <iterate property="bmList" conjunction="," open="(" close=")">#bmList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="bm">db.[bm]=#bm#</isNotNull>
        <isNotNull prepend="and" property="not_bm">db.[bm] <![CDATA[ <> ]]> #not_bm#</isNotNull>
        <isNotNull prepend="and" property="ywlc_bm">bm like '%ywlc%'</isNotNull>
        <isNotNull prepend="and" property="not_ywlc_bm">bm not like '%ywlc%'</isNotNull>
        <isNotNull prepend="and" property="mc">db.[mc]=#mc#</isNotNull>
        <isNotNull prepend="and" property="val">db.[val]=#val#</isNotNull>
        <isNotNull prepend="and" property="sort_id">db.[sort_id]=#sort_id#</isNotNull>
        <isNotNull prepend="and" property="more_sort_id">db.[sort_id]<![CDATA[ > ]]>#more_sort_id#</isNotNull>
        <isNotNull prepend="and" property="description">db.[description]=#description#</isNotNull>
      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id_user_master] asc,db.[bm] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_mc">db.[mc]=#new_mc#</isNotNull>
        <isNotNull prepend="," property="new_val">db.[val]=#new_val#</isNotNull>
        <isNotNull prepend="," property="new_sort_id">db.[sort_id]=#new_sort_id#</isNotNull>
        <isNotNull prepend="," property="new_description">db.[description]=#new_description#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[Ts_param_business]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Ts_Param_Business">
      set nocount on
      <include refid="NoLock" />
      select db.id_user_master, db.bm, mm.mc, db.val, db.sort_id, db.description from <include refid="Table"/> as db
      left join <include refid="Table"/> as mm on mm.bm=db.bm and mm.id_user_master=0
      <include refid="Where"/>
      UNION ALL SELECT id_user_master, bm, mc, val, sort_id, description FROM Ts_param_business a WHERE a.id_user_master=0 AND not EXISTS(SELECT 1 FROM <include refid="Table"/> as db
    <include refid="Where"/> AND a.bm=db.bm)    
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Ts_Param_Business">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Ts_Param_Business">
      set nocount on
      <include refid="NoLock" />
      select db.[id_user_master],db.[bm],db.[mc],db.[val],db.[sort_id],db.[description] from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>   

    <procedure id="Data_reset"  parameterMap="selectParam">
      p_sys_data_reset
    </procedure>
  </statements>
</sqlMap>

