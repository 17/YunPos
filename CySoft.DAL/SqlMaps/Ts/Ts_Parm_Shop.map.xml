<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Ts_Parm_Shop"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Ts_Parm_Shop" type="CySoft.Model.Ts.Ts_Parm_Shop,CySoft.Model" />
    <typeAlias alias="Ts_Parm_ShopWithShopMc" type="CySoft.Model.Ts.Ts_Parm_ShopWithShopMc,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="idList">
          db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
        <isNotNull prepend="and" property="id_list">
          db.[id] in <iterate property="id_list" conjunction="," open="(" close=")">#id_list[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
        <isNotNull prepend="and" property="id_masteruser">db.[id_masteruser]=#id_masteruser#</isNotNull>
        <isNotNull prepend="and" property="id_shop">db.[id_shop]=#id_shop#</isNotNull>
        <isNotNull prepend="and" property="id_shop_zb_md">(db.[id_shop]=#id_shop_zb# or db.[id_shop]=#id_shop_md#)</isNotNull>
        <isNotNull prepend="and" property="id_shopList">
          db.[id_shop] in <iterate property="id_shopList" conjunction="," open="(" close=")">#id_shopList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="parmcode">db.[parmcode]=#parmcode#</isNotNull>
        <isNotNull prepend="and" property="regex">db.[regex]=#regex#</isNotNull>
        <isNotNull prepend="and" property="parmname">db.[parmname]=#parmname#</isNotNull>
        <isNotNull prepend="and" property="s_parmname">db.[parmname] like #s_parmname#</isNotNull>
        <isNotNull prepend="and" property="parmvalue">db.[parmvalue]=#parmvalue#</isNotNull>
        <isNotNull prepend="and" property="nlast">db.[nlast]=#nlast#</isNotNull>
        <isNotNull prepend="and" property="version">db.[version]=#version#</isNotNull>
        <isNotNull prepend="and" property="parmdescribe">db.[parmdescribe]=#parmdescribe#</isNotNull>
        <isNotNull prepend="and" property="get_self_defaul">
          (
          db.[id_masteruser]='0'
          <isNotNull prepend="or" property="self_id_masteruser"> db.[id_masteruser]=#self_id_masteruser# </isNotNull>
          )
        </isNotNull>
        <isNotNull prepend="and" property="sort_id">db.[sort_id]=#sort_id#</isNotNull>
        <isNotNull prepend="and" property="flag_editstyle">db.[flag_editstyle]=#flag_editstyle#</isNotNull>
        <isNotNull prepend="and" property="flag_type">db.[flag_type]=#flag_type#</isNotNull>
        <isNotNull prepend="and" property="lg_flag_type">db.[flag_type]<![CDATA[ < ]]>#lg_flag_type#</isNotNull>
      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_id_masteruser">db.[id_masteruser]=#new_id_masteruser#</isNotNull>
        <isNotNull prepend="," property="new_id_shop">db.[id_shop]=#new_id_shop#</isNotNull>
        <isNotNull prepend="," property="new_parmcode">db.[parmcode]=#new_parmcode#</isNotNull>
        <isNotNull prepend="," property="new_parmname">db.[parmname]=#new_parmname#</isNotNull>
        <isNotNull prepend="," property="new_parmvalue">db.[parmvalue]=#new_parmvalue#</isNotNull>
        <isNotNull prepend="," property="new_regex">db.[regex]=#new_regex#</isNotNull>
        <isNotNull prepend="," property="new_nlast">db.[nlast]=#new_nlast#</isNotNull>
        <isNotNull prepend="," property="new_version">db.[version]=#new_version#</isNotNull>
        <isNotNull prepend="," property="new_parmdescribe">db.[parmdescribe]=#new_parmdescribe#</isNotNull>
        <isNotNull prepend="," property="new_sort_id">db.[sort_id]=#new_sort_id#</isNotNull>
        <isNotNull prepend="," property="new_flag_editstyle">db.[flag_editstyle]=#new_flag_editstyle#</isNotNull>
        <isNotNull prepend="," property="new_flag_type">db.[flag_type]=#new_flag_type#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[ts_parm_shop]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Ts_Parm_Shop">
      set nocount on
      <include refid="NoLock" />
      select db.[id_masteruser],db.[id],db.[id_shop],db.[parmcode],db.[parmname],db.[parmvalue],db.[nlast],db.[regex],db.[version],db.[parmdescribe],db.[sort_id],db.[flag_editstyle],db.[flag_type] from <include refid="Table"/> as db
      <include refid="Where"/>
      <include refid="Order"/>
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Ts_Parm_ShopWithShopMc">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.*,s.mc from <include refid="Table"/> as db
      left join dbo.tb_shop s on s.id=db.id_shop
      <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Ts_Parm_Shop">
      set nocount on
      <include refid="NoLock" />
      select db.[id_masteruser],db.[id],db.[id_shop],db.[parmcode],db.[parmname],db.[parmvalue],db.[nlast],db.[regex],db.[version],db.[parmdescribe],db.[sort_id],db.[flag_editstyle],db.[flag_type] from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

  </statements>
</sqlMap>

