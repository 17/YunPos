<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Ts_Sale_Order_Log"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Ts_Sale_Order_Log" type="CySoft.Model.Ts.Ts_Sale_Order_Log,CySoft.Model" />
    <typeAlias alias="Ts_Sale_Order_Log_Query" type="CySoft.Model.Ts.Ts_Sale_Order_Log_Query,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="idList">
          db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
        <isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
        <isNotNull prepend="and" property="dh">db.[dh]=#dh#</isNotNull>
        <isNotNull prepend="and" property="rq">db.[rq]=#rq#</isNotNull>
        <isNotNull prepend="and" property="start_rq">Datediff(day,#start_rq#,db.[rq]) > -1</isNotNull>
        <isNotNull prepend="and" property="end_rq">Datediff(day,db.[rq],Convert(date,#end_rq#)) > -1</isNotNull>
        <isNotNull prepend="and" property="id_user">db.[id_user]=#id_user#</isNotNull>
        <isNotNull prepend="and" property="id_user_master">db.[id_user_master]=#id_user_master#</isNotNull>
        <isNotNull prepend="and" property="flag_type">db.[flag_type]=#flag_type#</isNotNull>
        <isNotNull prepend="and" property="content">db.[content]=#content#</isNotNull>
      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_dh">db.[dh]=#new_dh#</isNotNull>
        <isNotNull prepend="," property="new_rq">db.[rq]=#new_rq#</isNotNull>
        <isNotNull prepend="," property="new_id_user">db.[id_user]=#new_id_user#</isNotNull>
        <isNotNull prepend="," property="new_id_user_master">db.[id_user_master]=#new_id_user_master#</isNotNull>
        <isNotNull prepend="," property="new_flag_type">db.[flag_type]=#new_flag_type#</isNotNull>
        <isNotNull prepend="," property="new_content">db.[content]=#new_content#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[Ts_sale_order_log]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      select (isnull(max(db.id),0)+1) as value from <include refid="Table"/> as db <include refid="Where"/>
    </select>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Ts_Sale_Order_Log_Query">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[dh],db.[rq],db.[id_user],db.[id_user_master],db.[flag_type],db.[content],
      u.name as user_name,
      fl.mc as flag_mc,
      isnull(u1.companyname,u.companyname) as user_companyname
      from <include refid="Table"/> as db
      left join Tb_user u on u.id=db.id_user
      left join Tb_user u1 on u1.id=u.fatherId
      left join Ts_flag fl on fl.bm =db.flag_type and fl.bs_lx='orderlogtype'
      <include refid="Where"/>
      <include refid="Order"/>
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Ts_Sale_Order_Log">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Ts_Sale_Order_Log">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[dh],db.[rq],db.[id_user],db.[id_user_master],db.[flag_type],db.[content] from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

  </statements>
</sqlMap>

