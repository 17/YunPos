<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Ts_Log"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<alias>
		<typeAlias alias="Ts_Log" type="CySoft.Model.Ts.Ts_Log,CySoft.Model" />
    <typeAlias alias="Ts_Log_Query" type="CySoft.Model.Ts.Ts_Log_Query,CySoft.Model" />
	</alias>
	<statements>
		<sql id="Where">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="idList">
					db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
				</isNotNull>
				<isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
				<isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
				<isNotNull prepend="and" property="id_user">db.[id_user]=#id_user#</isNotNull>
				<isNotNull prepend="and" property="flag_lx">db.[flag_lx]=#flag_lx#</isNotNull>
				<isNotNull prepend="and" property="rq">db.[rq]=#rq#</isNotNull>
				<isNotNull prepend="and" property="start_rq">Datediff(day,#start_rq#,db.[rq]) > -1</isNotNull>
				<isNotNull prepend="and" property="end_rq">Datediff(day,db.[rq],Convert(date,#end_rq#)) > -1</isNotNull>
				<isNotNull prepend="and" property="ip">db.[ip]=#ip#</isNotNull>
				<isNotNull prepend="and" property="flag_from">db.[flag_from]=#flag_from#</isNotNull>
				<isNotNull prepend="and" property="client">db.[client]=#client#</isNotNull>
				<isNotNull prepend="and" property="version_client">db.[version_client]=#version_client#</isNotNull>
				<isNotNull prepend="and" property="content">db.[content]=#content#</isNotNull>
        <isNotNull prepend="and" property="id_user_master">
          (db.id_user = #id_user_master# or exists(select 1 from Tb_user as u2 where u2.fatherId = #id_user_master# and u2.id = db.id_user))
        </isNotNull>
				<isNotNull property="flag_time">
					<isEqual compareValue="1" prepend="and" property="flag_time">Datediff(day,Getdate(),db.[rq]) > -3</isEqual>
					<isEqual compareValue="2" prepend="and" property="flag_time">Datediff(day,Getdate(),db.[rq]) > -7</isEqual>
					<isEqual compareValue="3" prepend="and" property="flag_time">Datediff(day,dateadd(month,-1,getdate()),db.[rq] ) > -1</isEqual>
					<isEqual compareValue="4" prepend="and" property="flag_time">Datediff(day,dateadd(month,-6,getdate()),db.[rq] ) > -1</isEqual>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Order">
			<dynamic prepend="order by">
				<isNotNull property="sort">
					db.$sort$
					<isNotNull property="dir">
						<isEqual compareValue="asc" property="dir">asc</isEqual>
						<isEqual compareValue="desc" property="dir">desc</isEqual>
					</isNotNull>
				</isNotNull>
				<isNull property="sort">db.[id] desc</isNull>
			</dynamic>
		</sql>

		<sql id="Set">
			<dynamic prepend="set">
				<isNotNull prepend="," property="new_id_user">db.[id_user]=#new_id_user#</isNotNull>
				<isNotNull prepend="," property="new_flag_lx">db.[flag_lx]=#new_flag_lx#</isNotNull>
				<isNotNull prepend="," property="new_rq">db.[rq]=#new_rq#</isNotNull>
				<isNotNull prepend="," property="new_ip">db.[ip]=#new_ip#</isNotNull>
				<isNotNull prepend="," property="new_flag_from">db.[flag_from]=#new_flag_from#</isNotNull>
				<isNotNull prepend="," property="new_client">db.[client]=#new_client#</isNotNull>
				<isNotNull prepend="," property="new_version_client">db.[version_client]=#new_version_client#</isNotNull>
				<isNotNull prepend="," property="new_content">db.[content]=#new_content#</isNotNull>
			</dynamic>
		</sql>

		<sql id="RowBetween">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="start">
					t.rownumber between (#start# + 1)
					<isNotNull prepend="and" property="limit">
						(#start# + #limit#)
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Table">
			<isNotNull property="database">[$database$]..</isNotNull>[Ts_log]
		</sql>

		<sql id="NoLock">
			set transaction isolation level read uncommitted
		</sql>

		<delete id="Delete" parameterClass="System.Collections.IDictionary">
			set nocount on
			delete db from <include refid="Table"/> as db <include refid="Where"/>
		</delete>

		<update id="UpdateAll" parameterClass="Ts_Log">
			set nocount on
			update db set db.[id_user]=#id_user#,db.[flag_lx]=#flag_lx#,db.[rq]=#rq#,db.[ip]=#ip#,db.[flag_from]=#flag_from#,db.[client]=#client#,db.[version_client]=#version_client#,db.[content]=#content# from <include refid="Table"/> as db where db.[id]=#id#
		</update>

		<update id="UpdatePart" parameterClass="System.Collections.IDictionary">
			set nocount on
			update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
		</update>

		<select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Ts_Log">
			set nocount on
			<include refid="NoLock" />
			select db.[id],db.[id_user],db.[flag_lx],db.[rq],db.[ip],db.[flag_from],db.[client],db.[version_client],db.[content] from <include refid="Table"/> as db
			<include refid="Where"/>
			<include refid="Order"/>
		</select>

		<select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Ts_Log_Query">
			set nocount on
			<include refid="NoLock" />
			select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.*,u.username,u.name,u.companyname,isnull(lx.mc,'') as name_flag_lx from <include refid="Table"/> as db
			left join Tb_user u on u.id=db.id_user
			left join Ts_flag as lx on lx.bs_lx = 'logFlag' and lx.bm = db.flag_lx
			<include refid="Where"/>
      ) as t
      <include refid="RowBetween" />
		</select>
    
    <select id="QueryItem" parameterClass="System.Collections.IDictionary" resultClass="Ts_Log">
      set nocount on
      <include refid="NoLock" />
      select top 1 db.[id],db.[id_user],db.[flag_lx],db.[rq],db.[ip],db.[flag_from],db.[client],db.[version_client],db.[content] from <include refid="Table"/> as db
      <include refid="Where"/>
      <include refid="Order"/>
    </select>

		<select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			<include refid="NoLock" />
			select count(1) as value from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

		<select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Ts_Log">
			set nocount on
			<include refid="NoLock" />
			select db.[id],db.[id_user],db.[flag_lx],db.[rq],db.[ip],db.[flag_from],db.[client],db.[version_client],db.[content] from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

	</statements>
</sqlMap>