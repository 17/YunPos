<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Ts_Codingrule"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<alias>
		<typeAlias alias="Ts_Codingrule" type="CySoft.Model.Ts.Ts_Codingrule,CySoft.Model" />
	</alias>
	<statements>
		<sql id="Where">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="idList">
					db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
				</isNotNull>
				<isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
				<isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
				<isNotNull prepend="and" property="coding">db.[coding]=#coding#</isNotNull>
				<isNotNull prepend="and" property="name">db.[name]=#name#</isNotNull>
				<isNotNull prepend="and" property="flag_type">db.[flag_type]=#flag_type#</isNotNull>
				<isNotNull prepend="and" property="lx">db.[lx]=#lx#</isNotNull>
				<isNotNull prepend="and" property="lx_bm">db.[lx_bm]=#lx_bm#</isNotNull>
				<isNotNull prepend="and" property="prefix">db.[prefix]=#prefix#</isNotNull>
				<isNotNull prepend="and" property="length">db.[length]=#length#</isNotNull>
				<isNotNull prepend="and" property="step">db.[step]=#step#</isNotNull>
				<isNotNull prepend="and" property="level">db.[level]=#level#</isNotNull>
				<isNotNull prepend="and" property="flag_bs">db.[flag_bs]=#flag_bs#</isNotNull>
			</dynamic>
		</sql>

		<sql id="Order">
			<dynamic prepend="order by">
				<isNull property="sort">db.[id] asc</isNull>
				<isNotNull property="sort">
					db.$sort$
					<isNotNull property="dir">
						<isEqual compareValue="asc" property="dir">asc</isEqual>
						<isEqual compareValue="desc" property="dir">desc</isEqual>
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Set">
			<dynamic prepend="set">
				<isNotNull prepend="," property="new_coding">db.[coding]=#new_coding#</isNotNull>
				<isNotNull prepend="," property="new_name">db.[name]=#new_name#</isNotNull>
				<isNotNull prepend="," property="new_flag_type">db.[flag_type]=#new_flag_type#</isNotNull>
				<isNotNull prepend="," property="new_lx">db.[lx]=#new_lx#</isNotNull>
				<isNotNull prepend="," property="new_lx_bm">db.[lx_bm]=#new_lx_bm#</isNotNull>
				<isNotNull prepend="," property="new_prefix">db.[prefix]=#new_prefix#</isNotNull>
				<isNotNull prepend="," property="new_length">db.[length]=#new_length#</isNotNull>
				<isNotNull prepend="," property="new_step">db.[step]=#new_step#</isNotNull>
				<isNotNull prepend="," property="new_level">db.[level]=#new_level#</isNotNull>
				<isNotNull prepend="," property="new_flag_bs">db.[flag_bs]=#new_flag_bs#</isNotNull>
			</dynamic>
		</sql>

		<sql id="RowBetween">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="start">
					t.rownumber between (#start# + 1)
					<isNotNull prepend="and" property="limit">
						(#start# + #limit#)
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Table">
			<isNotNull property="database">[$database$]..</isNotNull>[Ts_codingrule]
		</sql>

		<sql id="NoLock">
			set transaction isolation level read uncommitted
		</sql>

		<delete id="Delete" parameterClass="System.Collections.IDictionary">
			set nocount on
			delete db from <include refid="Table"/> as db <include refid="Where"/>
		</delete>

		<update id="UpdatePart" parameterClass="System.Collections.IDictionary">
			set nocount on
			update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
		</update>

		<select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			select (isnull(max(db.id),0)+1) as value from <include refid="Table"/> as db <include refid="Where"/>
		</select>

		<select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Ts_Codingrule">
			set nocount on
			<include refid="NoLock" />
			select db.[id],db.[coding],db.[name],db.[flag_type],db.[lx],db.[lx_bm],db.[prefix],db.[length],db.[step],db.[level],db.[flag_bs] from <include refid="Table"/> as db
			<include refid="Where"/>
			<include refid="Order"/>
		</select>

		<select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Ts_Codingrule">
			set nocount on
			<include refid="NoLock" />
			select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
			<include refid="RowBetween" />
		</select>

		<select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			<include refid="NoLock" />
			select count(1) as value from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

		<select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Ts_Codingrule">
			set nocount on
			<include refid="NoLock" />
			select db.[id],db.[coding],db.[name],db.[flag_type],db.[lx],db.[lx_bm],db.[prefix],db.[length],db.[step],db.[level],db.[flag_bs] from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

	</statements>
</sqlMap>