<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="RegisterPay"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="RegisterPay" type="CySoft.Model.Pay.RegisterPay,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="ledgerno">db.[ledgerno]=#ledgerno#</isNotNull>
        <isNotNull prepend="and" property="id_user_master">db.[id_user_master]= #id_user_master#</isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_bindmobile">db.[bindmobile]=#new_bindmobile#</isNotNull>
        <isNotNull prepend="," property="new_customertype">db.[customertype]=#new_customertype#</isNotNull>
        <isNotNull prepend="," property="new_signedname">db.[signedname]=#new_signedname#</isNotNull>
        <isNotNull prepend="," property="new_linkman">db.[linkman]=#new_linkman#</isNotNull>
        <isNotNull prepend="," property="new_idcard">db.[idcard]=#new_idcard#</isNotNull>
        <isNotNull prepend="," property="new_businesslicence">db.[businesslicence]=#new_businesslicence#</isNotNull>
        <isNotNull prepend="," property="new_legalperson">db.[legalperson]=#new_legalperson#</isNotNull>
        <isNotNull prepend="," property="new_minsettleamount">db.[minsettleamount]=#new_minsettleamount#</isNotNull>
        <isNotNull prepend="," property="new_riskreserveday">db.[riskreserveday]=#new_riskreserveday#</isNotNull>
        <isNotNull prepend="," property="new_bankaccountnumber">db.[bankaccountnumber]=#new_bankaccountnumber#</isNotNull>
        <isNotNull prepend="," property="new_bankname">db.[bankname]=#new_bankname#</isNotNull>
        <isNotNull prepend="," property="new_accountname">db.[accountname]=#new_accountname#</isNotNull>
        <isNotNull prepend="," property="new_bankaccounttype">db.[bankaccounttype]=#new_bankaccounttype#</isNotNull>
        <isNotNull prepend="," property="new_bankprovince">db.[bankprovince]=#new_bankprovince#</isNotNull>
        <isNotNull prepend="," property="new_bankcity">db.[bankcity]=#new_bankcity#</isNotNull>
        <isNotNull prepend="," property="new_manualsettle">db.[manualsettle]=#new_manualsettle#</isNotNull>
        <isNotNull prepend="," property="new_active">db.[active]=#new_active#</isNotNull>
        <isNotNull prepend="," property="new_rq_create">db.[rq_create]=#new_rq_create#</isNotNull>
        <isNotNull prepend="," property="new_feetype">db.[feetype]=#new_feetype#</isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[RegisterPay]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>


    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="RegisterPay">
      set nocount on
      <include refid="NoLock" />
      select db.*  from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>
  </statements>
</sqlMap>