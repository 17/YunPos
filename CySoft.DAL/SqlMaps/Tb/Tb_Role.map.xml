<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Tb_Role"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<alias>
		<typeAlias alias="Tb_Role" type="CySoft.Model.Tb.Tb_Role,CySoft.Model" />
    <typeAlias alias="Tb_Role_Query" type="CySoft.Model.Tb.Tb_Role_Query,CySoft.Model" />
  </alias>
	<statements>
		<sql id="Where">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="idList">
					db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
				</isNotNull>
				<isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
				<isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
				<isNotNull prepend="and" property="flag_type">db.[flag_type]=#flag_type#</isNotNull>
				<isNotNull prepend="and" property="id_masteruser">db.[id_masteruser]=#id_masteruser#</isNotNull>
				<isNotNull prepend="and" property="flag_update">db.[flag_update]=#flag_update#</isNotNull>
				<isNotNull prepend="and" property="name">db.[name] like #name#</isNotNull>
        <isNotNull prepend="and" property="s_role">db.[name] like #s_role#</isNotNull>
				<isNotNull prepend="and" property="id_create">db.[id_create]=#id_create#</isNotNull>
        <isNotNull prepend="and" property="up_platform_user">(db.[id_masteruser]=#id_masteruser# or db.[flag_type]=2)</isNotNull>
				<isNotNull prepend="and" property="rq_create">db.[rq_create]=#rq_create#</isNotNull>
				<isNotNull prepend="and" property="start_rq_create">Datediff(day,#start_rq_create#,db.[rq_create]) > -1</isNotNull>
				<isNotNull prepend="and" property="end_rq_create">Datediff(day,db.[rq_create],Convert(date,#end_rq_create#)) > -1</isNotNull>
				<isNotNull prepend="and" property="id_edit">db.[id_edit]=#id_edit#</isNotNull>
				<isNotNull prepend="and" property="rq_edit">db.[rq_edit]=#rq_edit#</isNotNull>
				<isNotNull prepend="and" property="start_rq_edit">Datediff(day,#start_rq_edit#,db.[rq_edit]) > -1</isNotNull>
				<isNotNull prepend="and" property="end_rq_edit">Datediff(day,db.[rq_edit],Convert(date,#end_rq_edit#)) > -1</isNotNull>
        <isNotNull prepend="and" property="companyname">tu.[companyname] like #companyname#</isNotNull>
        <isNotNull prepend="and" property="rq_start_reg">Datediff(day,#rq_start_reg#,db.[rq_create]) > -1</isNotNull>
        <isNotNull prepend="and" property="rq_end_reg">Datediff(day,db.[rq_create],Convert(date,#rq_end_reg#)) > -1</isNotNull>
        <isNotNull prepend="and" property="role_describe">db.[role_describe]=#role_describe#</isNotNull>
				<isNotNull property="flag_master">
					<isEqual compareValue="1" prepend="and" property="flag_master">
            (db.flag_type = 2 or db.id_masteruser = #_id_masteruser#)
          </isEqual>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Order">
			<dynamic prepend="order by">
				<isNull property="sort">db.[id] asc</isNull>
				<isNotNull property="sort">
					db.$sort$
					<isNotNull property="dir">
						<isEqual compareValue="asc" property="dir">asc</isEqual>
						<isEqual compareValue="desc" property="dir">desc</isEqual>
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Set">
			<dynamic prepend="set">
				<isNotNull prepend="," property="new_flag_type">db.[flag_type]=#new_flag_type#</isNotNull>
				<isNotNull prepend="," property="new_id_masteruser">db.[id_masteruser]=#new_id_id_masteruser#</isNotNull>
				<isNotNull prepend="," property="new_flag_update">db.[flag_update]=#new_flag_update#</isNotNull>
				<isNotNull prepend="," property="new_name">db.[name]=#new_name#</isNotNull>
				<isNotNull prepend="," property="new_id_create">db.[id_create]=#new_id_create#</isNotNull>
				<isNotNull prepend="," property="new_rq_create">db.[rq_create]=#new_rq_create#</isNotNull>
				<isNotNull prepend="," property="new_id_edit">db.[id_edit]=#new_id_edit#</isNotNull>
				<isNotNull prepend="," property="new_rq_edit">db.[rq_edit]=#new_rq_edit#</isNotNull>
        <isNotNull prepend="," property="new_role_describe">db.[role_describe]=#new_role_describe#</isNotNull>
			</dynamic>
		</sql>

		<sql id="RowBetween">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="start">
					t.rownumber between (#start# + 1)
					<isNotNull prepend="and" property="limit">
						(#start# + #limit#)
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Table">
			<isNotNull property="database">[$database$]..</isNotNull>[Tb_role]
		</sql>

		<sql id="NoLock">
			set transaction isolation level read uncommitted
		</sql>

		<delete id="Delete" parameterClass="System.Collections.IDictionary">
			set nocount on
			delete db from <include refid="Table"/> as db <include refid="Where"/>
		</delete>

		<update id="UpdatePart" parameterClass="System.Collections.IDictionary">
			set nocount on
			update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
		</update>

		<select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			select (isnull(max(db.id),0)+1) as value from <include refid="Table"/> as db <include refid="Where"/>
		</select>

		<select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Tb_Role">
			set nocount on
			<include refid="NoLock" />
      select db.[id],db.[flag_type],db.[id_masteruser],db.[flag_update],db.[name],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit],db.[role_describe] from <include refid="Table"/> as db
			<include refid="Where"/>
			<include refid="Order"/>
		</select>

		<!--<select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Tb_Role_Query">
			set nocount on
			<include refid="NoLock" />
			select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.*,tu.companyname,tu2.name as creatorname from <include refid="Table"/> as db
      left join tb_user tu
      on db.id_masteruser=tu.id
      left join tb_user tu2
      on db.id_edit=tu2.id
      <include refid="Where"/>) as t
			<include refid="RowBetween" />
		</select>-->
    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Tb_Role_Query">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.*,
      (select COUNT(1) from tb_role_function where id_role=db.id) admin_mgr,
      (select COUNT(1) from tb_role_pos_function where id_role=db.id and flag_use=1) pos_mgr
      from <include refid="Table"/> as db
      <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>
		<!--<select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			<include refid="NoLock" />
			select count(1) as value from <include refid="Table"/> as db
      left join tb_user tu
      on db.id_masteruser=tu.id
      left join tb_user tu2
      on db.id_create=tu2.id
      <include refid="Where"/>
		</select>-->
    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>
    
		<select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Tb_Role">
			set nocount on
			<include refid="NoLock" />
      select db.[id],db.[flag_type],db.[id_masteruser],db.[flag_update],db.[name],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit],db.[role_describe] from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

	</statements>
</sqlMap>