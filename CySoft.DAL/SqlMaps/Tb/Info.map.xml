<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Info"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Info" type="CySoft.Model.Tb.Info,CySoft.Model" />
    <typeAlias alias="Info_Query" type="CySoft.Model.Tb.Info_Query,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="idList">
          db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
        <isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
        <isNotNull prepend="and" property="Title">db.[Title]=#Title#</isNotNull>
        <isNotNull prepend="and" property="content">db.[content]=#content#</isNotNull>
        <isNotNull prepend="and" property="id_info_type">db.[id_info_type]=#id_info_type#</isNotNull>
        <isNotNull prepend="and" property="id_create">db.[id_create]=#id_create#</isNotNull>
        <isNotNull prepend="and" property="rq_create">db.[rq_create]=#rq_create#</isNotNull>
        <isNotNull prepend="and" property="start_rq_create">Datediff(day,#start_rq_create#,db.[rq_create]) > -1</isNotNull>
        <isNotNull prepend="and" property="end_rq_create">Datediff(day,db.[rq_create],Convert(date,#end_rq_create#)) > -1</isNotNull>
        <isNotNull prepend="and" property="id_master">db.[id_master]=#id_master#</isNotNull>
        <isNotNull prepend="and" property="filename">db.[filename]=#filename#</isNotNull>
        <isNotNull prepend="and" property="sl_send">db.[sl_send]=#sl_send#</isNotNull>
        <isNotNull prepend="and" property="sl_read">db.[sl_read]=#sl_read#</isNotNull>
        <isNotNull prepend="and" property="flag_from">db.[flag_from]=#flag_from#</isNotNull>
        <isNotNull prepend="and" property="fileSize">db.[fileSize]=#fileSize#</isNotNull>

        <isNotNull prepend="and" property="id_user">u.[id_user]=#id_user#</isNotNull>
        <isNotNull prepend="and" property="id_user_yw">u.[id_user]=#id_user_yw#</isNotNull>
        <isNotNull prepend="and" property="rq_create_day">datediff(day,db.[rq_create],getdate())=0</isNotNull>
        <isNotNull prepend="and" property="rq_create_week">datediff(week,db.[rq_create],getdate())=0</isNotNull>
        <isNotNull prepend="and" property="rq_create_month">datediff(month,db.[rq_create],getdate())=0</isNotNull>
        <isNotNull prepend="and" property="rq_create_year">datediff(year,db.[rq_create],getdate())=0</isNotNull>
        <isNotNull prepend="and" property="flag_reade">u.[flag_reade]=#flag_reade#</isNotNull>
      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_Title">db.[Title]=#new_Title#</isNotNull>
        <isNotNull prepend="," property="new_content">db.[content]=#new_content#</isNotNull>
        <isNotNull prepend="," property="new_id_info_type">db.[id_info_type]=#new_id_info_type#</isNotNull>
        <isNotNull prepend="," property="new_id_create">db.[id_create]=#new_id_create#</isNotNull>
        <isNotNull prepend="," property="new_rq_create">db.[rq_create]=#new_rq_create#</isNotNull>
        <isNotNull prepend="," property="new_id_master">db.[id_master]=#new_id_master#</isNotNull>
        <isNotNull prepend="," property="new_filename">db.[filename]=#new_filename#</isNotNull>
        <isNotNull prepend="," property="new_sl_send">db.[sl_send]=#new_sl_send#</isNotNull>
        <isNotNull prepend="," property="new_sl_read">db.[sl_read]=#new_sl_read#</isNotNull>
        <isNotNull prepend="," property="new_flag_from">db.[flag_from]=#new_flag_from#</isNotNull>
        <isNotNull prepend="," property="new_fileSize">db.[fileSize]=#new_fileSize#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[info]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      select (isnull(max(db.id),0)+1) as value from <include refid="Table"/> as db <include refid="Where"/>
    </select>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Info_Query">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[Title],db.[content],db.[id_info_type],db.[id_create],db.[rq_create],db.[id_master],db.[filename],db.[fileSize],db.[sl_send],db.[sl_read],db.[flag_from] from <include refid="Table"/> as db
      <include refid="Where"/>
      <include refid="Order"/>
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Info_Query">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.*,tu.companyname,tu.name,tp.mc as Info_type_name from <include refid="Table"/> as db
      left join tb_user tu on db.id_master = tu.id
      left join info_type tp on db.id_info_type=tp.id
      <isNotNull property="id_user_yw">
        left join info_user u on db.id=u.id_info
      </isNotNull>
      <include refid="Where"/>
      ) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <isNotNull property="id_user_yw">
      left join info_user u on db.id=u.id_info
      </isNotNull>
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Info">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[Title],db.[content],db.[id_info_type],db.[id_create],db.[rq_create],db.[id_master],db.[filename],db.[fileSize],db.[sl_send],db.[sl_read],db.[flag_from] from <include refid="Table"/> as db
      left join info_User u on db.id = u.id_info
      <include refid="Where"/>
    </select>

  </statements>
</sqlMap>

