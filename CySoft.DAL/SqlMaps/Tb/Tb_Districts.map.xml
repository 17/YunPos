<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Tb_Districts"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Tb_Districts" type="CySoft.Model.Tb.Tb_Districts,CySoft.Model" />
    <typeAlias alias="Tb_Districts_Tree" type="CySoft.Model.Tb.Tb_Districts_Tree,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="idList">
          db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
        <isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
        <isNotNull prepend="and" property="fatherId">db.[fatherId]=#fatherId#</isNotNull>
        <isNotNull prepend="and" property="name">db.[name]=#name#</isNotNull>
        <isNotNull prepend="and" property="path">db.[path]=#path#</isNotNull>
        <isNotNull prepend="and" property="level">db.[level]=#level#</isNotNull>
        <isNotNull prepend="and" property="sort">db.[sort]=#sort#</isNotNull>
        <isNotNull prepend="and" property="local">db.[local] like #local#</isNotNull>
        <isNotNull prepend="and" property="childId">EXISTS(SELECT 1 FROM Tb_Districts WHERE db.path+'/' LIKE path+'/%' AND id=#childId#)</isNotNull>
      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[sort] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_fatherId">db.[fatherId]=#new_fatherId#</isNotNull>
        <isNotNull prepend="," property="new_name">db.[name]=#new_name#</isNotNull>
        <isNotNull prepend="," property="new_path">db.[path]=#new_path#</isNotNull>
        <isNotNull prepend="," property="new_level">db.[level]=#new_level#</isNotNull>
        <isNotNull prepend="," property="new_sort">db.[sort]=#new_sort#</isNotNull>
        <isNotNull prepend="," property="new_local">db.[local]=#new_local#</isNotNull>
        <isNotNull prepend="," property="new_path_all">db.[path]=replace(db.path,#old_path_all#,#new_path_all#)</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[Tb_Districts]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      select (isnull(max(db.id),0)+1) as value from <include refid="Table"/> as db <include refid="Where"/>
    </select>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Tb_Districts">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[fatherId],db.[name],db.[path],db.[level],db.[local],db.sort from <include refid="Table"/> as db
      <include refid="Where"/>
      <include refid="Order"/>
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Tb_Districts">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Tb_Districts">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[fatherId],db.[name],db.[path],db.[level],db.[local],db.sort from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>
    
    <select id="QueryTree" parameterClass="System.Collections.IDictionary" resultClass="Tb_Districts_Tree">
      set nocount on
      <include refid="NoLock" />
      select db.id, db.[name] as [text],db.fatherId,db.path from <include refid="Table"/> as db
      <include refid="Where"/>
      <include refid="Order"/>
    </select>
  </statements>
</sqlMap>
