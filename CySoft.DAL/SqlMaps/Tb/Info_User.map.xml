<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Info_User"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Info_User" type="CySoft.Model.Tb.Info_User,CySoft.Model" />
    <typeAlias alias="Info_Query" type="CySoft.Model.Tb.Info_Query,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="id_userList">
          db.[id_user] in <iterate property="id_userList" conjunction="," open="(" close=")">#id_userList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id_user">db.[id_user]=#id_user#</isNotNull>
        <isNotNull prepend="and" property="not_id_user">db.[id_user] <![CDATA[ <> ]]> #not_id_user#</isNotNull>
        <isNotNull prepend="and" property="id_infoList">
          db.[id_info] in <iterate property="id_infoList" conjunction="," open="(" close=")">#id_infoList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id_info">db.[id_info]=#id_info#</isNotNull>
        <isNotNull prepend="and" property="not_id_info">db.[id_info] <![CDATA[ <> ]]> #not_id_info#</isNotNull>
        <isNotNull prepend="and" property="flag_reade">db.[flag_reade]=#flag_reade#</isNotNull>
        <isNotNull prepend="and" property="rq">db.[rq]=#rq#</isNotNull>
        <isNotNull prepend="and" property="start_rq">Datediff(day,#start_rq#,db.[rq]) > -1</isNotNull>
        <isNotNull prepend="and" property="end_rq">Datediff(day,db.[rq],Convert(date,#end_rq#)) > -1</isNotNull>
        <isNotNull prepend="and" property="flag_from">db.[flag_from]=#flag_from#</isNotNull>
        <isNotNull prepend="and" property="id_master_from">u.id_master=#id_master_from#</isNotNull>
        <!--部分客户集合-->
        <isNotNull prepend="and" property="id_user_master">
          exists(select 1 from Tb_account where  db.id=id_user)
          and  (db.fatherId in($id_user_master$))          
        </isNotNull>
        <!--全部客户-->
        <isNotNull prepend="and" property="id_gys">
          exists(select 1 from Tb_account where  db.id=id_user)
          AND EXISTS(SELECT * FROM Tb_gys_cgs WHERE flag_stop=0 AND id_user_master_gys=#id_gys# AND id_user_master_cgs=db.fatherId)
        </isNotNull>
        <!--所有用户-->
        <isNotNull prepend="and" property="all_account">
          exists(select 1 from Tb_account where  db.id=id_user) and db.[id]<![CDATA[ <> ]]>1
        </isNotNull>
        
        <isNotNull prepend="and" property="info_Id">
          exists(select 1 from info b where b.id=#info_Id# and id = db.id_info)
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id_user] asc,db.[id_info] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_flag_reade">db.[flag_reade]=#new_flag_reade#</isNotNull>
        <isNotNull prepend="," property="new_rq">db.[rq]=#new_rq#</isNotNull>
        <isNotNull prepend="," property="new_flag_from">db.[flag_from]=#new_flag_from#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[info_User]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Info_User">
      set nocount on
      <include refid="NoLock" />
      select db.[id_user],db.[id_info],db.[flag_reade],db.[rq],db.[flag_from] from <include refid="Table"/> as db   
      <include refid="Where"/>
      <include refid="Order"/>
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Info_Query">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(order by u.id desc) as rownumber,u.*,
      case when tu.companyname='' then '内部公告' else tu.companyname end companyname,tu.name,tp.mc as Info_type_name,db.flag_reade from <include refid="Table"/> as db
      right join info u on db.id_info = u.id
      left join tb_user tu on u.id_master = tu.id
      join info_type tp on u.id_info_type=tp.id
      <include refid="Where"/>
      <isNotNull property="bmList">
        and u.id_info_type not in(select id from info_type where bm in <iterate property="bmList" conjunction="," open="(" close=")">#bmList[]#</iterate>)
      </isNotNull>
      ) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      right join info u on db.id_info = u.id
      <include refid="Where"/>
      <isNotNull property="bmList">
        and u.id_info_type not in(select id from info_type where bm in <iterate property="bmList" conjunction="," open="(" close=")">#bmList[]#</iterate>)
      </isNotNull>
      <isNotNull property="business_id">
        and u.id_info_type =#business_id#
      </isNotNull>
    </select>
    
    <select id="QueryCountOfGG" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(id_user) from [info_User] where [id_info] in (select [id] from [info] 
      <isNotNull property="id_info_type">
        where [id_info_type]=#id_info_type#
      </isNotNull>
      )
      <isNotNull property="id_user">
         and id_user=#id_user#
      </isNotNull>
    </select>
    
    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Info_User">
      set nocount on
      <include refid="NoLock" />
      select db.[id_user],db.[id_info],db.[flag_reade],db.[rq],db.[flag_from] from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>
    <!--批量插入接收公告信息的用户人群-->
    
    <select id="BatchInsert_User" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />

      <!--客户-->
      insert <include refid="Table"/> ([id_user],[id_info],[flag_reade],[flag_from],[rq])
      select db.[id],#infoId#,0,#_from#,#rq_new# from
      (
      SELECT id,id fatherId FROM tb_User WHERE fatherId=0 AND flag_stop=0
      UNION
      SELECT id,fatherId FROM tb_User WHERE fatherId>0 AND flag_stop=0
      )db
      <include refid="Where"/>

      <!--员工-->
      insert <include refid="Table"/> ([id_user],[id_info],[flag_reade],[flag_from])
      select db.[id],#infoId#,0,#_from# from
      (
      SELECT id,id fatherId FROM tb_User WHERE fatherId=0 AND flag_stop=0
      UNION
      SELECT id,fatherId FROM tb_User WHERE fatherId>0 AND flag_stop=0
      )db
      where 1=#yg_flag#
      <!--全部员工-->
      <isNotNull property="id_gys_yg">
        and exists(select 1 from Tb_account where  db.id=id_user)
        and  (db.fatherId=#id_gys_yg#)       
      </isNotNull>
      <!--部分员工-->
      <isNotNull property="id_account"> and db.id in($id_account$)</isNotNull>
      
    </select>
    
  </statements>
</sqlMap>

