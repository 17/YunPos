<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Tb_Cgs_Level"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<alias>
		<typeAlias alias="Tb_Cgs_Level" type="CySoft.Model.Tb.Tb_Cgs_Level,CySoft.Model" />
	</alias>
	<statements>
		<sql id="Where">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="idList">
					db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
				</isNotNull>
				<isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
				<isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
				<isNotNull prepend="and" property="id_gys">db.[id_gys]=#id_gys#</isNotNull>
				<isNotNull prepend="and" property="flag_sys">db.[flag_sys]=#flag_sys#</isNotNull>
				<isNotNull prepend="and" property="name">db.[name]=#name#</isNotNull>
				<isNotNull prepend="and" property="agio">db.[agio]=#agio#</isNotNull>
				<isNotNull prepend="and" property="remark">db.[remark]=#remark#</isNotNull>
				<isNotNull prepend="and" property="id_create">db.[id_create]=#id_create#</isNotNull>
				<isNotNull prepend="and" property="rq_create">db.[rq_create]=#rq_create#</isNotNull>
				<isNotNull prepend="and" property="start_rq_create">Datediff(day,#start_rq_create#,db.[rq_create]) > -1</isNotNull>
				<isNotNull prepend="and" property="end_rq_create">Datediff(day,db.[rq_create],Convert(date,#end_rq_create#)) > -1</isNotNull>
				<isNotNull prepend="and" property="id_edit">db.[id_edit]=#id_edit#</isNotNull>
				<isNotNull prepend="and" property="rq_edit">db.[rq_edit]=#rq_edit#</isNotNull>
				<isNotNull prepend="and" property="start_rq_edit">Datediff(day,#start_rq_edit#,db.[rq_edit]) > -1</isNotNull>
				<isNotNull prepend="and" property="end_rq_edit">Datediff(day,db.[rq_edit],Convert(date,#end_rq_edit#)) > -1</isNotNull>
			</dynamic>
		</sql>

		<sql id="Order">
			<dynamic prepend="order by">
				<isNull property="sort">db.[id] asc</isNull>
				<isNotNull property="sort">
					db.$sort$
					<isNotNull property="dir">
						<isEqual compareValue="asc" property="dir">asc</isEqual>
						<isEqual compareValue="desc" property="dir">desc</isEqual>
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Set">
			<dynamic prepend="set">
				<isNotNull prepend="," property="new_id_gys">db.[id_gys]=#new_id_gys#</isNotNull>
				<isNotNull prepend="," property="new_flag_sys">db.[flag_sys]=#new_flag_sys#</isNotNull>
				<isNotNull prepend="," property="new_name">db.[name]=#new_name#</isNotNull>
				<isNotNull prepend="," property="new_agio">db.[agio]=#new_agio#</isNotNull>
				<isNotNull prepend="," property="new_remark">db.[remark]=#new_remark#</isNotNull>
				<isNotNull prepend="," property="new_id_create">db.[id_create]=#new_id_create#</isNotNull>
				<isNotNull prepend="," property="new_rq_create">db.[rq_create]=#new_rq_create#</isNotNull>
				<isNotNull prepend="," property="new_id_edit">db.[id_edit]=#new_id_edit#</isNotNull>
				<isNotNull prepend="," property="new_rq_edit">db.[rq_edit]=#new_rq_edit#</isNotNull>
			</dynamic>
		</sql>

		<sql id="RowBetween">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="start">
					t.rownumber between (#start# + 1)
					<isNotNull prepend="and" property="limit">
						(#start# + #limit#)
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Table">
			<isNotNull property="database">[$database$]..</isNotNull>[Tb_cgs_level]
		</sql>

		<sql id="NoLock">
			set transaction isolation level read uncommitted
		</sql>

		<delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete a from Tb_sp_dj a WHERE EXISTS(SELECT 1  from <include refid="Table"/> as db <include refid="Where"/> and a.id_cgs_level=db.id AND a.id_gys=db.id_gys)
      delete db from <include refid="Table"/> as db <include refid="Where"/>
		</delete>

		<update id="UpdatePart" parameterClass="System.Collections.IDictionary">
			set nocount on
			update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
		</update>

		<select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			select (isnull(max(db.id),0)+1) as value from <include refid="Table"/> as db <include refid="Where"/>
		</select>

		<select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Tb_Cgs_Level">
			set nocount on
			<include refid="NoLock" />
			select db.[id],db.[id_gys],db.[flag_sys],db.[name],db.[agio],db.[remark],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit] from <include refid="Table"/> as db
			<include refid="Where"/>
			<include refid="Order"/>
		</select>

		<select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Tb_Cgs_Level">
			set nocount on
			<include refid="NoLock" />
			select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
			<include refid="RowBetween" />
		</select>

		<select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			<include refid="NoLock" />
			select count(1) as value from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

		<select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Tb_Cgs_Level">
			set nocount on
			<include refid="NoLock" />
			select db.[id],db.[id_gys],db.[flag_sys],db.[name],db.[agio],db.[remark],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit] from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

	</statements>
</sqlMap>