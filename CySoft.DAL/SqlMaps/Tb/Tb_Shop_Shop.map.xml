<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Tb_Shop_Shop"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Tb_Shop_Shop" type="CySoft.Model.Tb.Tb_Shop_Shop,CySoft.Model" />
    <typeAlias alias="Tb_Shop_ShopWithMc" type="CySoft.Model.Tb.Tb_Shop_ShopWithMc,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="idList">
          db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
        <isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
        <isNotNull prepend="and" property="id_masteruser">db.[id_masteruser]=#id_masteruser#</isNotNull>
        <isNotNull prepend="and" property="id_shop_child">db.[id_shop_child]=#id_shop_child#</isNotNull>
        <isNotNull prepend="and" property="id_shop_father">db.[id_shop_father]=#id_shop_father#</isNotNull>
        <isNotNull prepend="and" property="path">db.[path]=#path#</isNotNull>
        <isNotNull prepend="and" property="flag_state">db.[flag_state]=#flag_state#</isNotNull>
        <isNotNull prepend="and" property="id_create">db.[id_create]=#id_create#</isNotNull>
        <isNotNull prepend="and" property="rq_create">db.[rq_create]=#rq_create#</isNotNull>
        <isNotNull prepend="and" property="start_rq_create">Datediff(day,#start_rq_create#,db.[rq_create]) > -1</isNotNull>
        <isNotNull prepend="and" property="end_rq_create">Datediff(day,db.[rq_create],Convert(date,#end_rq_create#)) > -1</isNotNull>
        <isNotNull prepend="and" property="id_edit">db.[id_edit]=#id_edit#</isNotNull>
        <isNotNull prepend="and" property="rq_edit">db.[rq_edit]=#rq_edit#</isNotNull>
        <isNotNull prepend="and" property="start_rq_edit">Datediff(day,#start_rq_edit#,db.[rq_edit]) > -1</isNotNull>
        <isNotNull prepend="and" property="end_rq_edit">Datediff(day,db.[rq_edit],Convert(date,#end_rq_edit#)) > -1</isNotNull>
        <isNotNull prepend="and" property="flag_delete">db.[flag_delete]=#flag_delete#</isNotNull>
        <isNotNull prepend="and" property="currentId">EXISTS(SELECT 1 FROM tb_shop_shop WHERE db.path+'/' LIKE path+'/%' AND id=#currentId#)</isNotNull>

        <isNotNull prepend="and" property="shopShopID">EXISTS(SELECT 1 FROM tb_shop_shop ss WHERE db.path+'/' LIKE ss.path+'/%' AND ss.id_shop_father=#shopShopID# and  ss.id_masteruser=#id_masteruser# )</isNotNull>
        
        <isNotNull prepend="and" property="tb_shop_state">s.[flag_state]=#tb_shop_state#</isNotNull>
        <isNotNull prepend="and" property="tb_shop_delete">s.[flag_delete]=#tb_shop_delete#</isNotNull>

        <isNotNull prepend="and" property="id_shop_father_self">(db.[id_shop_father]=#id_shop_father_self# or db.id_shop_child=#id_shop_father_self#)</isNotNull>
        

      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_id_masteruser">db.[id_masteruser]=#new_id_masteruser#</isNotNull>
        <isNotNull prepend="," property="new_id_shop_child">db.[id_shop_child]=#new_id_shop_child#</isNotNull>
        <isNotNull prepend="," property="new_id_shop_father">db.[id_shop_father]=#new_id_shop_father#</isNotNull>
        <isNotNull prepend="," property="new_path">db.[path]=#new_path#</isNotNull>
        <isNotNull prepend="," property="new_flag_state">db.[flag_state]=#new_flag_state#</isNotNull>
        <isNotNull prepend="," property="new_id_create">db.[id_create]=#new_id_create#</isNotNull>
        <isNotNull prepend="," property="new_rq_create">db.[rq_create]=#new_rq_create#</isNotNull>
        <isNotNull prepend="," property="new_id_edit">db.[id_edit]=#new_id_edit#</isNotNull>
        <isNotNull prepend="," property="new_rq_edit">db.[rq_edit]=#new_rq_edit#</isNotNull>
        <isNotNull prepend="," property="new_flag_delete">db.[flag_delete]=#new_flag_delete#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[tb_shop_shop]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Tb_Shop_ShopWithMc">
      set nocount on
      <include refid="NoLock" />
      select db.[id_masteruser],db.[id],db.[id_shop_child],db.[id_shop_father],db.[path],db.[flag_state],db.[id_create],s.[rq_create],db.[id_edit],db.[rq_edit],db.[flag_delete],s.flag_type
      ,s.mc,s.bm
      ,s.flag_state shop_flag_state
      ,s.flag_delete shop_flag_delete
      from <include refid="Table"/> as db
      left join tb_shop s on db.id_shop_child=s.id
      <include refid="Where"/>
      <include refid="Order"/>
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Tb_Shop_Shop">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Tb_Shop_Shop">
      set nocount on
      <include refid="NoLock" />
      select db.[id_masteruser],db.[id],db.[id_shop_child],db.[id_shop_father],db.[path],db.[flag_state],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit],db.[flag_delete] from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

  </statements>
</sqlMap>
