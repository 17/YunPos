<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Faq"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Faq" type="CySoft.Model.Tb.Faq,CySoft.Model" />
    <typeAlias alias="Faq_Query" type="CySoft.Model.Tb.Faq_Query,CySoft.Model" />
    <typeAlias alias="Faq_Tree" type="CySoft.Model.Tb.Faq_Tree,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="idList">
          db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
        <isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
        <isNotNull prepend="and" property="id_user">db.[id_user]=#id_user#</isNotNull>
        <isNotNull prepend="and" property="id_user_master">db.[id_user_master]=#id_user_master#</isNotNull>
        <isNotNull prepend="and" property="rq_create">db.[rq_create]=#rq_create#</isNotNull>
        <isNotNull prepend="and" property="start_rq_create">Datediff(day,#start_rq_create#,db.[rq_create]) > -1</isNotNull>
        <isNotNull prepend="and" property="end_rq_create">Datediff(day,db.[rq_create],Convert(date,#end_rq_create#)) > -1</isNotNull>
        <isNotNull prepend="and" property="contents">db.[contents]=#contents#</isNotNull>
        <isNotNull prepend="and" property="flag_type">db.[flag_type]=#flag_type#</isNotNull>
        <isNotNull prepend="and" property="flag_state">db.[flag_state]=#flag_state#</isNotNull>
        <isNotNull prepend="and" property="flag_delete">db.[flag_delete]=#flag_delete#</isNotNull>
        <isNotNull prepend="and" property="id_user_receive">db.[id_user_receive]=#id_user_receive#</isNotNull>
        <isNotNull prepend="and" property="not_id_user_receive">db.[id_user_receive] <![CDATA[ <> ]]> #not_id_user_receive#</isNotNull>
        <isNotNull prepend="and" property="fatherId">db.[fatherId]=#fatherId#</isNotNull>
        <isNotNull prepend="and" property="flag_from">db.[flag_from]=#flag_from#</isNotNull>

        <isNotNull prepend="and" property="isKeFu">db.[id_user_master]<![CDATA[ <> ]]>#isKeFu#</isNotNull>
        <isNotNull prepend="and" property="id_userFlag">db.id_user=#id_userFlag#</isNotNull>

        <isNotNull prepend="and" property="state0">db.flag_state=#state0#</isNotNull>
        <isNotNull prepend="and" property="state1">db.flag_state>#state1#</isNotNull>
        <isNotNull prepend="and" property="likeContents">(db.contents like #likeContents# or u.companyname like #likeContents#)</isNotNull>
        <isNotNull prepend="and" property="byDate">(db.rq_create between '$startTime$' and dateadd(day,1,'$endTime$')) </isNotNull>
              
        <isNotNull prepend="and" property="orFatherId">(db.[id]=#orFatherId# or db.[fatherId]=#orFatherId#)</isNotNull>
      </dynamic>
    </sql>
  
    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_id_user">db.[id_user]=#new_id_user#</isNotNull>
        <isNotNull prepend="," property="new_id_user_master">db.[id_user_master]=#new_id_user_master#</isNotNull>
        <isNotNull prepend="," property="new_rq_create">db.[rq_create]=#new_rq_create#</isNotNull>
        <isNotNull prepend="," property="new_contents">db.[contents]=#new_contents#</isNotNull>
        <isNotNull prepend="," property="new_flag_type">db.[flag_type]=#new_flag_type#</isNotNull>
        <isNotNull prepend="," property="new_flag_state">db.[flag_state]=#new_flag_state#</isNotNull>
        <isNotNull prepend="," property="new_flag_delete">db.[flag_delete]=#new_flag_delete#</isNotNull>
        <isNotNull prepend="," property="new_id_user_receive">db.[id_user_receive]=#new_id_user_receive#</isNotNull>
        <isNotNull prepend="," property="new_fatherId">db.[fatherId]=#new_fatherId#</isNotNull>
        <isNotNull prepend="," property="new_flag_from">db.[flag_from]=#new_flag_from#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>
    
    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[faq]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      select (isnull(max(db.id),0)+1) as value from <include refid="Table"/> as db <include refid="Where"/>
    </select>
    
    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Faq_Tree">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[id_user],db.[id_user_master],db.[rq_create],db.[contents] as text,db.[flag_type],db.[flag_state],db.[fatherId]
      ,u.[name],u.[companyname],u.[phone],ul.[name] as reName,ul.[companyname] as reCompanyname,ul.[phone] as rePhone,ul.[email]
      from <include refid="Table"/> as db
      left join Tb_user u on u.[id]=db.[id_user]
      left join Tb_user ul on ul.[id]=db.[id_user_master]
      <include refid="Where"/>
      <include refid="Order"/>
    </select>
    
    <!--接口手机端分页-->
    <select id="QueryServicePage" parameterClass="System.Collections.IDictionary" resultClass="Faq_Tree">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.[id],db.[id_user],db.[id_user_master],db.[rq_create],db.[contents] as text,db.[flag_type],db.[flag_state],db.[fatherId]
      ,u.[name],u.[companyname],u.[phone],ul.[name] as reName,ul.[companyname] as reCompanyname,ul.[phone] as rePhone,ul.[email]
      from <include refid="Table"/> as db
      left join Tb_user u on u.[id]=db.[id_user]
      left join Tb_user ul on ul.[id]=db.[id_user_master]
      <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>
    
    <!--PC端分页-->
    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Faq_Tree">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[id_user],db.[id_user_master],db.[rq_create],db.[contents] as text,db.[flag_type],db.[flag_state],db.[fatherId]
      ,u.[name],u.[companyname],u.[phone],ul.[name] as reName,ul.[companyname] as reCompanyname,ul.[phone] as rePhone,ul.[email]
      from
      <include refid="Table"/> as db
      left join Tb_user u on u.[id]=db.[id_user]
      left join Tb_user ul on ul.[id]=db.[id_user_master]
      where <isNotNull property="isKeFu">db.[id_user_master]!=#isKeFu# and</isNotNull>            
      exists(select 1 from faq a left join Tb_user b on a.id_user=b.id
      where (a.id=db.id or a.id=db.fatherId) and a.fatherId=0
      and
      EXISTS(SELECT 1 FROM (select ROW_NUMBER() over(order by db.id desc)as rownumber,db.[id]
      from  [faq] as db
      left join Tb_user u on u.[id]=db.[id_user]
      left join Tb_user ul on ul.[id]=db.[id_user_master]
      where
      <isNotNull property="id_userFlag">db.id_user=#id_userFlag#</isNotNull><!--提问人（采购商/客户）-->
      <isNotNull property="id_user_masterFlag">db.id_user_master=#id_user_masterFlag#</isNotNull><!--回复人（供应商、客户）-->
      <isNotNull property="id_userAndMaster">db.id_user=#id_user# and db.id_user_master=#id_user_master#</isNotNull><!--依据供应商、采购商查询数据-->
      and exists(
      select 1 from faq a left join Tb_user b on a.id_user=b.id
      where (a.id=db.id or a.id=db.fatherId)and a.fatherId=0
            <isNotNull prepend="and" property="state0">a.flag_state=#state0#</isNotNull><!--未回复-->
            <isNotNull prepend="and" property="state1">a.flag_state>#state1#</isNotNull><!--已回复-->
            <isNotNull prepend="and" property="likeContents">(a.contents like #likeContents# or u.companyname like #likeContents#)</isNotNull><!--依据问题内容搜索-->
            <isNotNull prepend="and" property="byDate">(a.rq_create between '$start_rq_create$' and dateadd(day,1,'$end_rq_create$')) </isNotNull><!--依据提问日期搜索-->
      )
      AND db.fatherId=0
      )t WHERE a.id=t.id and t.rownumber between (#start# + 1) and (#start# + #limit#))
      )
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/>as db
      left join Tb_user u on u.[id]=db.[id_user]
      left join Tb_user ul on ul.[id]=db.[id_user_master]
    <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Faq">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[id_user],db.[id_user_master],db.[rq_create],db.[contents],db.[flag_type],db.[flag_state],db.[flag_delete],db.[id_user_receive],db.[fatherId],db.[flag_from] from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

  </statements>
</sqlMap>


