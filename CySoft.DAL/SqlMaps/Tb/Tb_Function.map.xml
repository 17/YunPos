<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Tb_Function"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<alias>
		<typeAlias alias="Tb_Function" type="CySoft.Model.Tb.Tb_Function,CySoft.Model" />
	</alias>
	<statements>
		<sql id="Where">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="idList">
					db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
				</isNotNull>
				<isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
				<isNotNull prepend="and" property="not_id">db.[id] <![CDATA[ <> ]]> #not_id#</isNotNull>
				<isNotNull prepend="and" property="name">db.[name]=#name#</isNotNull>
				<isNotNull prepend="and" property="version">db.[version]=#version#</isNotNull>
				<isNotNull prepend="and" property="flag_type">db.[flag_type]=#flag_type#</isNotNull>
				<isNotNull prepend="and" property="flag_typeList">
					db.[flag_type] in <iterate property="flag_typeList" conjunction="," open="(" close=")">#flag_typeList[]#</iterate>
				</isNotNull>
				<isNotNull prepend="and" property="flag_stop">db.[flag_stop]=#flag_stop#</isNotNull>
				<isNotNull prepend="and" property="id_father">db.[id_father]=#id_father#</isNotNull>
				<isNotNull prepend="and" property="path">db.[path]=#path#</isNotNull>
        <isNotNull prepend="and" property="like_path">db.[path] like #like_path#</isNotNull>
        <!--<isNotNull prepend="and" property="path_l">db.[path] like #path_l#</isNotNull>-->
        <!--<isNotNull property="flag_master">
          <isEqual compareValue="1" prepend="and" property="flag_master">
            (db.[path] like #path_move# or db.[id]=#id_move#)
          </isEqual>
        </isNotNull>-->
				<isNotNull prepend="and" property="sort_id">db.[sort_id]=#sort_id#</isNotNull>
				<isNotNull prepend="and" property="id_create">db.[id_create]=#id_create#</isNotNull>
				<isNotNull prepend="and" property="rq_create">db.[rq_create]=#rq_create#</isNotNull>
				<isNotNull prepend="and" property="start_rq_create">Datediff(day,#start_rq_create#,db.[rq_create]) > -1</isNotNull>
				<isNotNull prepend="and" property="end_rq_create">Datediff(day,db.[rq_create],Convert(date,#end_rq_create#)) > -1</isNotNull>
				<isNotNull prepend="and" property="id_edit">db.[id_edit]=#id_edit#</isNotNull>
				<isNotNull prepend="and" property="rq_edit">db.[rq_edit]=#rq_edit#</isNotNull>
        <isNotNull prepend="and" property="controller_name">db.[controller_name]=#controller_name#</isNotNull>
        <isNotNull prepend="and" property="action_name">db.[action_name]=#action_name#</isNotNull>
        <isNotNull prepend="and" property="icon">db.[icon]=#icon#</isNotNull>
        <isNotNull prepend="and" property="param">db.[param]=#param#</isNotNull>
				<isNotNull prepend="and" property="start_rq_edit">Datediff(day,#start_rq_edit#,db.[rq_edit]) > -1</isNotNull>
				<isNotNull prepend="and" property="end_rq_edit">Datediff(day,db.[rq_edit],Convert(date,#end_rq_edit#)) > -1</isNotNull>
				<isNotNull prepend="and" property="id_role_sysList">
					exists(
					select 1 from Tb_function as fun
					where
					fun.flag_stop = 0
					and exists(select 1 from Tb_role_function as rf where rf.id_function = fun.id and rf.id_role in <iterate property="id_role_sysList" conjunction="," open="(" close=")">#id_role_sysList[]#</iterate>)
					and (db.path+'/' like fun.path+'/%' or fun.path+'/' like db.path+'/%')
					)
				</isNotNull>
        <isNotNull prepend="and" property="rolelist">
          db.[flag_stop]= 0  and
          db.id in (select id_function from dbo.tb_role_function where id_role in <iterate property="rolelist" conjunction="," open="(" close=")">#rolelist[]#</iterate>)
        </isNotNull>
				<isNotNull prepend="and" property="id_roleList">
					exists(
					select 1 from Tb_function as fun
					where
					fun.flag_stop = 0
					<isNotNull prepend="and" property="id_roleList">
						exists(select 1 from Tb_role_function as rf where rf.id_function = fun.id and rf.id_role in <iterate property="id_roleList" conjunction="," open="(" close=")">#id_roleList[]#</iterate>)
					</isNotNull>
					and (db.path+'/' like fun.path+'/%' or fun.path+'/' like db.path+'/%')
					)
				</isNotNull>
        <isNotNull prepend="and" property="tag_name">db.[tag_name]=#tag_name#</isNotNull>
			</dynamic>
		</sql>

		<sql id="Order">
			<dynamic prepend="order by">
				<isNull property="sort">db.[id] asc</isNull>
				<isNotNull property="sort">
					db.$sort$
					<isNotNull property="dir">
						<isEqual compareValue="asc" property="dir">asc</isEqual>
						<isEqual compareValue="desc" property="dir">desc</isEqual>
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Set">
			<dynamic prepend="set">
				<isNotNull prepend="," property="new_name">db.[name]=#new_name#</isNotNull>
				<isNotNull prepend="," property="new_version">db.[version]=#new_version#</isNotNull>
				<isNotNull prepend="," property="new_flag_type">db.[flag_type]=#new_flag_type#</isNotNull>
				<isNotNull prepend="," property="new_flag_stop">db.[flag_stop]=#new_flag_stop#</isNotNull>
				<isNotNull prepend="," property="new_fatherId">db.[id_father]=#new_fatherId#</isNotNull>
				<isNotNull prepend="," property="new_path">db.[path]=#new_path#</isNotNull>
				<isNotNull prepend="," property="new_sort_id">db.[sort_id]=#new_sort_id#</isNotNull>
				<isNotNull prepend="," property="new_id_create">db.[id_create]=#new_id_create#</isNotNull>
				<isNotNull prepend="," property="new_rq_create">db.[rq_create]=#new_rq_create#</isNotNull>
				<isNotNull prepend="," property="new_id_edit">db.[id_edit]=#new_id_edit#</isNotNull>
				<isNotNull prepend="," property="new_rq_edit">db.[rq_edit]=#new_rq_edit#</isNotNull>
        <isNotNull prepend="," property="new_controller_name">db.[controller_name]=#new_controller_name#</isNotNull>
        <isNotNull prepend="," property="new_action_name">db.[action_name]=#new_action_name#</isNotNull>
        <isNotNull prepend="," property="new_icon">db.[icon]=#new_icon#</isNotNull>
        <isNotNull prepend="," property="new_param">db.[param]=#new_param#</isNotNull>
        <isNotNull prepend="," property="new_tag_name">db.[tag_name]=#new_tag_name#</isNotNull>
			</dynamic>
		</sql>

		<sql id="RowBetween">
			<dynamic prepend="where">
				<isNotNull prepend="and" property="start">
					t.rownumber between (#start# + 1)
					<isNotNull prepend="and" property="limit">
						(#start# + #limit#)
					</isNotNull>
				</isNotNull>
			</dynamic>
		</sql>

		<sql id="Table">
			<isNotNull property="database">[$database$]..</isNotNull>[Tb_function]
		</sql>

		<sql id="NoLock">
			set transaction isolation level read uncommitted
		</sql>

		<delete id="Delete" parameterClass="System.Collections.IDictionary">
			set nocount on
			delete db from <include refid="Table"/> as db <include refid="Where"/>
		</delete>

		<update id="UpdatePart" parameterClass="System.Collections.IDictionary">
			set nocount on
			update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
		</update>

		<select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			select (isnull(max(db.id),0)+1) as value from <include refid="Table"/> as db <include refid="Where"/>
		</select>

		<select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Tb_Function">
			set nocount on
			<include refid="NoLock" />
      select db.[id],db.[name],db.[version],db.[flag_type],db.[flag_stop],db.[id_father],db.[path],db.[sort_id],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit],db.[controller_name],db.[action_name],db.[icon],db.[tag_name] from <include refid="Table"/> as db
			<include refid="Where"/>
			<include refid="Order"/>
		</select>

		<select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Tb_Function">
			set nocount on
			<include refid="NoLock" />
			select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
			<include refid="RowBetween" />
		</select>

		<select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
			set nocount on
			<include refid="NoLock" />
			select count(1) as value from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

		<select id="QueryItem" parameterClass="System.Collections.IDictionary" resultClass="Tb_Function">
			set nocount on
			<include refid="NoLock" />
      select db.[id],db.[name],db.[version],db.[flag_type],db.[flag_stop],db.[id_father],db.[path],db.[sort_id],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit],db.[controller_name],db.[action_name],db.[icon],db.[tag_name] from <include refid="Table"/> as db
			<include refid="Where"/>
		</select>

	</statements>
</sqlMap>