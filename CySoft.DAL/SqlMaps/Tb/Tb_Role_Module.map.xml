<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Tb_Role_Module"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Tb_Role_Module" type="CySoft.Model.Tb.Tb_Role_Module,CySoft.Model" />
    <typeAlias alias="Tb_Role_Module_Tree" type="CySoft.Model.Tb.Tb_Role_Module_Tree,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="id">db.[id]=#id#</isNotNull>
        <isNotNull prepend="and" property="idList">
          db.[id] in <iterate property="idList" conjunction="," open="(" close=")">#idList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id_platform_roleList">
          db.[id_platform_role] in <iterate property="id_platform_roleList" conjunction="," open="(" close=")">#id_platform_roleList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id_platform_role">db.[id_platform_role]=#id_platform_role#</isNotNull>
        <isNotNull prepend="and" property="not_id_platform_role">db.[id_platform_role] <![CDATA[ <> ]]> #not_id_platform_role#</isNotNull>
        <isNotNull prepend="and" property="id_functionList">
          db.[id_function] in <iterate property="id_functionList" conjunction="," open="(" close=")">#id_functionList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id_function">db.[id_function]=#id_function#</isNotNull>
        <isNotNull prepend="and" property="not_id_function">db.[id_function] <![CDATA[ <> ]]> #not_id_function#</isNotNull>
        <isNotNull prepend="and" property="id_module">db.[id_module]=#id_module#</isNotNull>
        <isNotNull prepend="and" property="id_module_father">db.[id_module_father]=#id_module_father#</isNotNull>
        <isNotNull prepend="and" property="name">db.[name]=#name#</isNotNull>
        <isNotNull prepend="and" property="sort_id">db.[sort_id]=#sort_id#</isNotNull>
        <isNotNull prepend="and" property="id_create">db.[id_create]=#id_create#</isNotNull>
        <isNotNull prepend="and" property="rq_create">db.[rq_create]=#rq_create#</isNotNull>
        <isNotNull prepend="and" property="start_rq_create">Datediff(day,#start_rq_create#,db.[rq_create]) > -1</isNotNull>
        <isNotNull prepend="and" property="end_rq_create">Datediff(day,db.[rq_create],Convert(date,#end_rq_create#)) > -1</isNotNull>
        <isNotNull prepend="and" property="id_edit">db.[id_edit]=#id_edit#</isNotNull>
        <isNotNull prepend="and" property="rq_edit">db.[rq_edit]=#rq_edit#</isNotNull>
        <isNotNull prepend="and" property="start_rq_edit">Datediff(day,#start_rq_edit#,db.[rq_edit]) > -1</isNotNull>
        <isNotNull prepend="and" property="end_rq_edit">Datediff(day,db.[rq_edit],Convert(date,#end_rq_edit#)) > -1</isNotNull>
      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id_platform_role] asc,db.[id_function] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_id_module">db.[id_module]=#new_id_module#</isNotNull>
        <isNotNull prepend="," property="new_id_module_father">db.[id_module_father]=#new_id_module_father#</isNotNull>
        <isNotNull prepend="," property="new_name">db.[name]=#new_name#</isNotNull>
        <isNotNull prepend="," property="new_id_function">db.[id_function]=#new_id_function#</isNotNull>
        <isNotNull prepend="," property="new_sort_id">db.[sort_id]=#new_sort_id#</isNotNull>
        <isNotNull prepend="," property="new_id_create">db.[id_create]=#new_id_create#</isNotNull>
        <isNotNull prepend="," property="new_rq_create">db.[rq_create]=#new_rq_create#</isNotNull>
        <isNotNull prepend="," property="new_id_edit">db.[id_edit]=#new_id_edit#</isNotNull>
        <isNotNull prepend="," property="new_rq_edit">db.[rq_edit]=#new_rq_edit#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[tb_role_module]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Tb_Role_Module_Tree">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[id_platform_role],db.[id_function],db.[id_module],db.[id_module_father],db.[name],db.[sort_id],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit],tf.name as name_function from <include refid="Table"/> as db
      left join tb_function tf
      on db.id_function=tf.id
      and tf.flag_stop=0
      <!--and tf.flag_type='module'-->
      <include refid="Where"/>
      <!--系统默认平台角色-->
      <isNull prepend="and" property="id_platform_role">db.[id_platform_role]= -1</isNull>
      <include refid="Order"/>
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Tb_Role_Module">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Tb_Role_Module">
      set nocount on
      <include refid="NoLock" />
      select db.[id],db.[id_platform_role],db.[id_function],db.[id_module],db.[id_module_father],db.[name],db.[sort_id],db.[id_create],db.[rq_create],db.[id_edit],db.[rq_edit] from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetNextKey" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      SELECT TOP 1 IDENT_CURRENT('[tb_role_module]')+1 as value from <include refid="Table"/> as db
    </select>
  </statements>
</sqlMap>

