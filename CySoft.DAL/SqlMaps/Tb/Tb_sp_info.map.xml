<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Tb_Sp_Info"  xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Tb_Sp_Info" type="CySoft.Model.Tb.Tb_Sp_Info,CySoft.Model" />
  </alias>
  <statements>
    <sql id="Where">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="id_spList">
          db.[id_sp] in <iterate property="id_spList" conjunction="," open="(" close=")">#id_spList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id_skuList">
          db.[id_sku] in <iterate property="id_skuList" conjunction="," open="(" close=")">#id_skuList[]#</iterate>
        </isNotNull>
        <isNotNull prepend="and" property="id_sp">db.[id_sp]=#id_sp#</isNotNull>
        <isNotNull prepend="and" property="id_sku">db.[id_sku]=#id_sku#</isNotNull>
        <isNotNull prepend="and" property="not_id_sp">db.[id_sp] <![CDATA[ <> ]]> #not_id_sp#</isNotNull>
        <isNotNull prepend="and" property="description">db.[description]=#description#</isNotNull>
      </dynamic>
    </sql>

    <sql id="Order">
      <dynamic prepend="order by">
        <isNull property="sort">db.[id_sp] asc</isNull>
        <isNotNull property="sort">
          db.$sort$
          <isNotNull property="dir">
            <isEqual compareValue="asc" property="dir">asc</isEqual>
            <isEqual compareValue="desc" property="dir">desc</isEqual>
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Set">
      <dynamic prepend="set">
        <isNotNull prepend="," property="new_description">db.[description]=#new_description#</isNotNull>
      </dynamic>
    </sql>

    <sql id="RowBetween">
      <dynamic prepend="where">
        <isNotNull prepend="and" property="start">
          t.rownumber between (#start# + 1)
          <isNotNull prepend="and" property="limit">
            (#start# + #limit#)
          </isNotNull>
        </isNotNull>
      </dynamic>
    </sql>

    <sql id="Table">
      <isNotNull property="database">[$database$]..</isNotNull>[Tb_sp_info]
    </sql>

    <sql id="NoLock">
      set transaction isolation level read uncommitted
    </sql>

    <delete id="Delete" parameterClass="System.Collections.IDictionary">
      set nocount on
      delete db from <include refid="Table"/> as db <include refid="Where"/>
    </delete>

    <update id="UpdatePart" parameterClass="System.Collections.IDictionary">
      set nocount on
      update db <include refid="Set"/> from <include refid="Table"/> as db <include refid="Where"/>
    </update>

    <select id="QueryList" parameterClass="System.Collections.IDictionary" resultClass="Tb_Sp_Info">
      set nocount on
      <include refid="NoLock" />
      select db.[id_sp],db.id_sku,db.[description] from <include refid="Table"/> as db
      <include refid="Where"/>
      <include refid="Order"/>
    </select>

    <select id="QueryAll" parameterClass="System.Collections.IDictionary" resultClass="Tb_Sp_Info">
      set nocount on
      <include refid="NoLock" />
      select t.* from ( select sp.id as id_sp,sku.id as id_sku, mc as name_sp,max(sku.bm) as bm,max(info.[description]) as description,

      isnull(stuff(( select  ','+'【'+td.mc+':'+td.val+'】'  from (select expt.*,temp.mc from [dbo].[Tb_sp_expand] expt left join [dbo].[Tb_sp_expand_template] temp on temp.id=expt.id_sp_expand_template)as td
      where td.id_sku=sku.id
      for xml path('')),1,1,''),'') as name_spec_zh

      from [Tb_sp] as sp
      join [Tb_sp_sku] as sku  on  sku.id_sp=sp.id
      left outer join [Tb_sp_info] as info  on info.id_sp=sp.id
      where 1=1
      <isNotNull property="id_gys">and id_gys_create=#id_gys# </isNotNull>
      <isNotNull property="sku">
        and sku.id in <iterate property="sku" conjunction="," open="(" close=")">#sku[]#</iterate> </isNotNull>
      GROUP BY sp.id,mc,sku.id
      ) as t
    </select>

    <select id="QueryPage" parameterClass="System.Collections.IDictionary" resultClass="Tb_Sp_Info">
      set nocount on
      <include refid="NoLock" />
      select t.* from (select row_number() over(<include refid="Order" />) as rownumber,db.* from <include refid="Table"/> as db <include refid="Where"/>) as t
      <include refid="RowBetween" />
    </select>

    <select id="GetCount" parameterClass="System.Collections.IDictionary" resultClass="int">
      set nocount on
      <include refid="NoLock" />
      select count(1) as value from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

    <select id="GetItem" parameterClass="System.Collections.IDictionary" resultClass="Tb_Sp_Info">
      set nocount on
      <include refid="NoLock" />
      select db.[id_sp],db.id_sku,db.[description] from <include refid="Table"/> as db
      <include refid="Where"/>
    </select>

  </statements>
</sqlMap>

